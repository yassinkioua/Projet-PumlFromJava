@startuml
'https://plantuml.com/class-diagram 
 skinparam classAttributeIconSize 0 
skinparam classFontStyle Bold
skinparam style strictuml
hide empty members
package western{
class Cowboy extends Personnage{ 
- gains : Integer
+ <<Create>> Cowboy(nom : String[*])
+ <<Create>> Cowboy(nom : String[*], boisson : Boisson[*])
+ getPseudo() : String[*]
+ liberer(dame : Dame[*]) : void
+ liberer(captives : Dame[*]) : void
+ capturer(horsLaLoi : HorsLaLoi[*]) : void
+ tirerSur(brigand : HorsLaLoi[*]) : void
+ sePresenter() : void
+ {static} getBoissonParDefaut() : Boisson[*]
+ {static} setBoissonParDefaut(boisson : Boisson[*]) : void

 } 
class Brigand extends Personnage implements HorsLaLoi{ 
# {static} LOOK_PAR_DEFAUT : String[*]
- look : String[*]
- recompense : Integer
- estLibre : boolean
+ <<Create>> Brigand(nom : String[*])
+ <<Create>> Brigand(nom : String[*], boisson : Boisson[*])
+ <<Create>> Brigand(nom : String[*], boisson : Boisson[*], look : String[*])
+ getLook() : String[*]
+ getRecompense() : Integer
+ estLibre() : boolean
+ kidnapper(dame : Dame[*]) : void
+ seFaireCapturer(cowBoy : Cowboy[*]) : void
+ seFaireTirerDessus(cowBoy : Cowboy[*]) : void
+ getPseudo() : String[*]
+ getCaptives() : Dame[*]
+ sePresenter() : void
+ {static} getBoissonParDefaut() : Boisson[*]
+ {static} setBoissonParDefaut(boisson : Boisson[*]) : void

 } 
class Dame extends Personnage{ 
- estLibre : boolean
+ <<Create>> Dame(nom : String[*])
+ <<Create>> Dame(nom : String[*], boisson : Boisson[*])
+ getPseudo() : String[*]
+ seFaireKidnapper(horsLaLoi : HorsLaLoi[*]) : void
+ seFaireLiberer(cowBoy : Cowboy[*]) : void
+ estLibre() : boolean
+ sePresenter() : void
+ {static} getBoissonParDefaut() : Boisson[*]
+ {static} setBoissonParDefaut(boisson : Boisson[*]) : void
+ getRavisseur() : HorsLaLoi[*]

 } 
class Boisson{ 
+ <<Create>> Boisson(nom : String[*], genre : Genre[*])
+ getNom() : String[*]
+ getGenre() : Genre[*]
+ getNomAvecArticleIndefini() : String[*]
+ getNomAvecArticlePartitif() : String[*]
+ getNomAvecArticleDefini() : String[*]
+ getNomAvecPreposition(preposition : String[*]) : String[*]

 } 
class Histoire4{ 
+ <<Create>> Histoire4()
+ {static} main(args : String[*]) : void

 } 
class Narrateur extends Personnage{ 
+ <<Create>> Narrateur()
+ <<Create>> Narrateur(nom : String[*])
+ dire(texte : String[*]) : void
+ boire(boisson : Boisson[*]) : void
+ boire() : void
+ getPseudo() : String[*]

 } 
class Ripou extends Cowboy implements HorsLaLoi{ 
+ <<Create>> Ripou(nom : String[*])
+ <<Create>> Ripou(nom : String[*], boisson : Boisson[*])
+ <<Create>> Ripou(nom : String[*], boisson : Boisson[*], look : String[*])
+ getLook() : String[*]
+ estLibre() : boolean
+ getRecompense() : Integer
+ kidnapper(dame : Dame[*]) : void
+ getCaptives() : Dame[*]
+ seFaireCapturer(cowBoy : Cowboy[*]) : void
+ seFaireTirerDessus(cowBoy : Cowboy[*]) : void
+ getPseudo() : String[*]
+ sePresenter() : void
+ liberer(dame : Dame[*]) : void

 } 
class Substantif{ 
- nom : String[*]
+ <<Create>> Substantif(nom : String[*], genre : Genre[*])
+ getNom() : String[*]
+ getGenre() : Genre[*]
+ toString() : String[*]
+ {static} isVowel(c : String) : boolean
+ {static} startsWithVowel(s : String[*]) : boolean
+ getArticleIndefini() : String[*]
+ avecArticleIndefini() : String[*]
+ {static} getArticleDefini(genre : Genre[*]) : String[*]
+ getArticleDefini() : String[*]
+ avecArticleDefini() : String[*]
+ {static} faireElision(article : String[*]) : String[*]
+ elision() : boolean
+ getArticlePartitif() : String[*]
+ avecArticlePartitif() : String[*]
+ avecElision(article : String[*]) : String[*]
+ avecPreposition(preposition : String[*]) : String[*]

 } 
enum Genre <<enum>> { 
FEMININ
MASCULIN

 } 
interface Nommable{ 
<<interface>>+ {abstract} getNom() : String[*]
+ {abstract} getPseudo() : String[*]

 } 
abstract class Personnage implements Nommable{ 
- nom : String[*]
+ <<Create>> Personnage(nom : String[*])
+ <<Create>> Personnage(nom : String[*], boisson : Boisson[*])
+ dire(texte : String[*]) : void
+ sePresenter() : void
+ boire(boisson : Boisson[*]) : void
+ boire() : void
+ getNom() : String[*]
+ getBoisson() : Boisson[*]
+ {static} getPseudos(personnages : ? extends western.Nommable[*]) : String[*]
+ {static} getBoissonParDefaut() : Boisson[*]

 } 
interface HorsLaLoi implements Nommable{ 
<<interface>>+ {abstract} estLibre() : boolean
+ {abstract} getRecompense() : Integer
+ {abstract} kidnapper(dame : Dame[*]) : void
+ {abstract} seFaireCapturer(cowBoy : Cowboy[*]) : void
+ {abstract} seFaireTirerDessus(cowBoy : Cowboy[*]) : void
+ {abstract} getLook() : String[*]
+ {abstract} getCaptives() : Dame[*]

 } 
Cowboy --o " * captures "HorsLaLoi
Cowboy --o " * boissonParDefaut "Boisson
Brigand --o " * captives "Dame
Brigand --o " * gardien "Cowboy
Brigand --o " * boissonParDefaut "Boisson
Dame --o " * sauveur "Cowboy
Dame --o " * ravisseur "HorsLaLoi
Dame --o " * boissonParDefaut "Boisson
Boisson --o " * substantif "Substantif
Boisson --o " * EAU "Boisson
Ripou --o " * brigand "Brigand
Substantif --o " * genre "Genre
Personnage --o " * BOISSON_PAR_DEFAUT "Boisson
Personnage --o " * boisson "Boisson
}
@enduml
